{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","document","title","concat","timeFormater","state","sessionLength","componentDidUpdate","prevProps","prevState","setState","sessionTimer","breakLength","breakTimer","timer","active","clearTimer","timerId","setInterval","break","breakCountdown","sessionCountdown","clearInterval","breakLengthHandler","e","stopPropagation","currentTarget","id","sessionLengthHandler","seconds","min","Math","floor","sec","toString","length","resetHandler","settings","_this2","react_default","a","createElement","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6772e35.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './icono.min.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n      break: false,\n      breakLength: 300,\n      breakTimer: 300,\n      sessionLength: 1500,\n      sessionTimer: 1500,\n      settings: false\n    };  \n  };\n\n  componentDidMount = () => {\n    document.title = `Tomatino Timer: ${this.timeFormater(this.state.sessionLength)}`;\n  }\n\n  componentDidUpdate= (prevProps, prevState) => {\n    if (prevState.sessionLength !== this.state.sessionLength) {\n      this.setState({ sessionTimer: this.state.sessionLength });\n    };\n    if (prevState.breakLength !== this.state.breakLength) {\n      this.setState({ breakTimer: this.state.breakLength });\n    };\n    if (prevState.sessionTimer !== this.state.sessionTimer) {\n      document.title = `Tomatino Timer: ${this.timeFormater(this.state.sessionTimer)}`;\n    };\n    if (this.state.sessionTimer === 0) {\n      document.title = `Tomatino Break: ${this.timeFormater(this.state.breakTimer)}`;\n    } \n  };\n  \n  timer = () => {\n    if (!this.state.active) {\n      this.timerId =  setInterval(() => {\n        if (this.state.sessionTimer === 0 ) {\n          this.setState({ break: true });\n        }\n        this.state.break ? this.breakCountdown() : this.sessionCountdown();\n      }, 300)\n      this.setState({active: true})\n    } else {\n      this.clearTimer();\n    };\n  };\n\n  clearTimer = () => {\n    this.setState({ active: false });\n    clearInterval(this.timerId);\n  };\n\n  breakLengthHandler = (e) => {\n    e.stopPropagation();\n    if (e.currentTarget.id === 'break-increment' && this.state.breakLength < 3600) {\n      this.setState((prevState) => ({ \n        breakLength: prevState.breakLength + 60\n      }));\n    } else if (e.currentTarget.id === 'break-decrement' && this.state.breakLength > 60) {\n      this.setState((prevState) => ({ \n        breakLength: prevState.breakLength - 60\n      }));\n    };\n  };\n\n  sessionCountdown = () => {\n    this.setState({ active: true, sessionTimer: this.state.sessionTimer - 1 });\n  };\n\n  breakCountdown = () => {\n    this.setState({ breakTimer: this.state.breakTimer - 1 });\n    if (this.state.breakTimer === 0) {\n      this.setState({ break: false, sessionTimer: this.state.sessionLength, breakTimer: this.state.breakLength })\n      this.sessionCountdown();\n    }\n  };\n \n  sessionLengthHandler = (e) => {\n    e.stopPropagation();\n    if (!this.state.active) {\n      if (e.currentTarget.id === 'session-increment' && this.state.sessionLength < 3600) {\n        this.setState((prevState) => ({ \n          sessionLength: prevState.sessionLength + 60\n      }));    \n      } else if (e.currentTarget.id === 'session-decrement' && this.state.sessionLength > 60) {\n        this.setState((prevState) => ({ \n          sessionLength: prevState.sessionLength - 60\n        }));\n      };\n    };\n  };\n\n  timeFormater = (seconds) => {\n    let min = Math.floor(seconds / 60);\n    let sec = Math.floor(seconds % 60);\n    if (min.toString().length === 1) {\n      min = '0' + min;\n    }\n    if (sec.toString().length === 1) {\n      sec = '0' + sec;\n    };\n    return `${min}:${sec}`;\n  };\n\n  resetHandler = () => {\n    this.clearTimer();\n    this.setState({\n      active: false,\n      break: false,\n      breakLength: 300,\n      breakTimer: 300,\n      sessionLength: 1500,\n      sessionTimer: 1500\n    });\n  };\n\n  render() {\n    return(\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <h1>Tomatino</h1>\n          <div className=\"timer\">\n            <div className=\"timer-display\">\n              <h2 id=\"timer-label\">{this.state.break ? \"Break\" : \"Session\"}</h2>\n              <p id=\"time-left\">\n                {\n                  this.state.break \n                  ? this.timeFormater(this.state.breakTimer) \n                  : this.timeFormater(this.state.sessionTimer)\n                }\n              </p>\n            </div>\n            <div className=\"timer-controls\">\n              <button \n                className={`button ${this.state.active ? \"pause\" : \"play\"}`} \n                id=\"start_stop\" \n                onClick={this.timer}\n              >\n              </button>\n              <button \n                id=\"reset\" \n                onClick={this.resetHandler}\n              >\n                <i className=\"icono-reset\"></i>\n              </button>\n              <button \n                className=\"show-settings\" \n                onClick={() => this.setState({ settings: !this.state.settings })}\n              >\n                <i className=\"icono-gear\"></i>\n              </button>\n            </div>\n          </div>\n          <div className={`settings ${this.state.settings ? \"show\" : \"hidden\"}`}>\n            <div className=\"session-settings\">\n              <h3 id=\"session-label\">Session</h3>\n              <p id=\"session-length\">{this.timeFormater(this.state.sessionLength)}</p>\n              <button \n                id=\"session-increment\" \n                onClick={this.sessionLengthHandler}\n              >\n                <i className=\"icono-caretUpSquare\"></i>\n              </button>\n              <button \n                id=\"session-decrement\" \n                onClick={this.sessionLengthHandler}\n              >\n                <i className=\"icono-caretDownSquare\"></i>\n              </button>\n            </div>\n            <div className=\"break-settings\">\n              <h3 id=\"break-length\">Break</h3>\n              <p id=\"break-length\">{this.timeFormater(this.state.breakLength)}</p>\n              <button \n                id=\"break-increment\" \n                onClick={this.breakLengthHandler}\n              >\n                <i className=\"icono-caretUpSquare\"></i>\n              </button>\n              <button \n                id=\"break-decrement\" \n                onClick={this.breakLengthHandler}\n              >\n                <i className=\"icono-caretDownSquare\"></i>\n              </button>\n            </div>\n          </div>        \n        </div>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}